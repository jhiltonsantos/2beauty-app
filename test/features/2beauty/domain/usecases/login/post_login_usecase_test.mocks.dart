// Mocks generated by Mockito 5.2.0 from annotations
// in two_beauty/test/features/2beauty/domain/usecases/login/post_login_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:two_beauty/core/constants/connection_header.dart' as _i2;
import 'package:two_beauty/core/error/failures.dart' as _i6;
import 'package:two_beauty/features/2beauty/domain/entities/login_get_token_entity.dart'
    as _i8;
import 'package:two_beauty/features/2beauty/domain/entities/user_access_entity.dart'
    as _i7;
import 'package:two_beauty/features/2beauty/domain/repositories/login_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUri_0 extends _i1.Fake implements Uri {}

class _FakeConnectionHeaderApi_1 extends _i1.Fake
    implements _i2.ConnectionHeaderApi {}

class _FakeEither_2<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i4.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri get urlController =>
      (super.noSuchMethod(Invocation.getter(#urlController),
          returnValue: _FakeUri_0()) as Uri);
  @override
  set urlController(Uri? _urlController) =>
      super.noSuchMethod(Invocation.setter(#urlController, _urlController),
          returnValueForMissingStub: null);
  @override
  _i2.ConnectionHeaderApi get connectionHeaderApi => (super.noSuchMethod(
      Invocation.getter(#connectionHeaderApi),
      returnValue: _FakeConnectionHeaderApi_1()) as _i2.ConnectionHeaderApi);
  @override
  set connectionHeaderApi(_i2.ConnectionHeaderApi? _connectionHeaderApi) =>
      super.noSuchMethod(
          Invocation.setter(#connectionHeaderApi, _connectionHeaderApi),
          returnValueForMissingStub: null);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserAccessEntity>> postLogin(
          _i8.LoginGetTokenEntity? loginGetTokenEntity) =>
      (super.noSuchMethod(Invocation.method(#postLogin, [loginGetTokenEntity]),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.UserAccessEntity>>.value(
                      _FakeEither_2<_i6.Failure, _i7.UserAccessEntity>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.UserAccessEntity>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i8.LoginGetTokenEntity>> getLogin() =>
      (super.noSuchMethod(Invocation.method(#getLogin, []),
          returnValue:
              Future<_i3.Either<_i6.Failure, _i8.LoginGetTokenEntity>>.value(
                  _FakeEither_2<_i6.Failure, _i8.LoginGetTokenEntity>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i8.LoginGetTokenEntity>>);
  @override
  _i5.Future<bool> logoutUser() =>
      (super.noSuchMethod(Invocation.method(#logoutUser, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}
